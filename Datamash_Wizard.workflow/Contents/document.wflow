<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>AMApplicationBuild</key>
	<string>509</string>
	<key>AMApplicationVersion</key>
	<string>2.10</string>
	<key>AMDocumentVersion</key>
	<string>2</string>
	<key>actions</key>
	<array>
		<dict>
			<key>action</key>
			<dict>
				<key>AMAccepts</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Optional</key>
					<true/>
					<key>Types</key>
					<array>
						<string>com.apple.applescript.object</string>
					</array>
				</dict>
				<key>AMActionVersion</key>
				<string>1.0</string>
				<key>AMApplication</key>
				<array>
					<string>Automator</string>
				</array>
				<key>AMParameterProperties</key>
				<dict>
					<key>source</key>
					<dict/>
				</dict>
				<key>AMProvides</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Types</key>
					<array>
						<string>com.apple.applescript.object</string>
					</array>
				</dict>
				<key>ActionBundlePath</key>
				<string>/System/Library/Automator/Run JavaScript.action</string>
				<key>ActionName</key>
				<string>Run JavaScript</string>
				<key>ActionParameters</key>
				<dict>
					<key>source</key>
					<string>function uniqueFN(fn){	var i = 1;	var myFN = fn;	var dot = '.';	var sep = '-';	var app = Application.currentApplication();	app.includeStandardAdditions = true;	while('0' == app.doShellScript('test -f ' + myFN + '; echo $?' )){		var segs = myFN.split(dot);		var segseg = segs[segs.length - 2 ].split(sep); 		if ( segseg.count &lt; 1 ) {			segseg.push(i);		} else {			if (segseg[1] == i) {					i = i + 1;									} 			segseg[1] = i;											 						}		segs[segs.length - 2 ] = segseg.join(sep);		myFN = segs.join(dot);	}		return myFN}function quotedForm(s) { return "'" + s.replace(/'/g, "'\\''") + "'" }function cmdOpts(firstLine) {	var calcMenu = ["sum", "min", "max", "absmin", "absmax", "range", "count", "first", "rand", "unique", "collapse", "countunique", "mean", "trimmean", "median", "q1", "q3", "perc", "mode", "antimode", "pstdev", "sstdev", "pvar", "svar", "mad", "madraw", "ssew", "pskew", "skurt", "pkurt", "jarque", "dpo"];	var wizMenu = ["Summary","Crosstab","Command Line"];	var app = Application.currentApplication();		app.includeStandardAdditions = true;	var cols = firstLine.split('\t');	for (var i = 0; i &lt; cols.length; i++) {			cols[i] = '' + (i + 1) + ' (' + cols[i] + ')';	}	var menu =  app.chooseFromList(wizMenu, {withPrompt: "Select your Datamash:", defaultItems: [wizMenu[0]] });	if ([] == menu) { return("cancel"); }	switch(menu[0]){	case wizMenu[0]:		var headers = app.displayDialog('Does your table have headers?',{buttons: ['Yes', 'No'],defaultButton: 'No', withTitle: 'Headers?'});		headers = headers.buttonReturned == "Yes" ? "H" : "";		var groupbys = app.chooseFromList(cols, {    multipleSelectionsAllowed: true,	withPrompt: "Select COLUMNS to group by:",    defaultItems: [cols[0]] });		if ([] == groupbys) { return("cancel"); }		groupbys.forEach(function(txt,i){			groupbys[i] = cols.indexOf(txt) + 1;		});		var gbl = groupbys.join(',');		var calcs = ''		var keepGoing = true;		do {			var calcChoice = app.chooseFromList(calcMenu, {    multipleSelectionsAllowed: false,	withPrompt: "Select calculation:",    defaultItems: [calcMenu[0]] });			if ([] == calcChoice) { return("cancel"); }			var colChoice =app.chooseFromList(cols, {    multipleSelectionsAllowed: false,	withPrompt: "Select COLUMN to calculate upon:",    defaultItems: [cols[0]] });			if ([] == colChoice) { return("cancel"); }			calcs = calcs + calcChoice[0] + ' ' + (1 + cols.indexOf(colChoice[0])) + ' ';				var another = app.displayDialog('Another Calculation?',{buttons: ['Yes', 'No'],defaultButton: 'No', withTitle: 'More?'});					} while (another.buttonReturned == 'Yes');		return ( '-s' + headers + ' groupby ' + gbl + ' ' + calcs);					break; 	case wizMenu[1]:		var headers = app.displayDialog('Does your table have headers?',{buttons: ['Yes', 'No'],defaultButton: 'No', withTitle: 'Headers?'});		headers = headers.buttonReturned == "Yes" ? "H" : "";		var groupbys = app.chooseFromList(cols, {    multipleSelectionsAllowed: false,	withPrompt: "Select COLUMN to group:",    defaultItems: [cols[0]] });		if ([] == groupbys) { return("cancel"); }		groupbys.forEach(function(txt,i){			groupbys[i] = cols.indexOf(txt)  + 1;		});		var gbcol = groupbys.join(',');		var groupbys = app.chooseFromList(cols, {    multipleSelectionsAllowed: false,	withPrompt: "Select ROW to group by:",    defaultItems: [cols[0]] });		if ([] == groupbys) { return("cancel"); }		groupbys.forEach(function(txt,i){			groupbys[i] = cols.indexOf(txt)  + 1;		});		var gbrow = groupbys.join(',');		var calcChoice = app.chooseFromList(calcMenu, {    multipleSelectionsAllowed: false,	withPrompt: "Select calculation:",    defaultItems: [calcMenu[0]] });		if ([] == calcChoice) { return("cancel"); }		var colChoice =app.chooseFromList(cols, {    multipleSelectionsAllowed: false,	withPrompt: "Select COLUMN to calculate on:",    defaultItems: [cols[0]] });		if ([] == colChoice) { return("cancel"); }		var calcs =  calcChoice[0] + ' ' + (cols.indexOf(colChoice[0]) + 1) + ' ';			return('-s' + headers + ' crosstab ' + gbrow + ',' + gbcol + ' ' + calcs);	break; 		var q = app.displayDialog("Command line options", {		    defaultAnswer: " -sH groupby 1 sum 2",		    withIcon: "note",		    buttons: ["Cancel", "Continue"],		    defaultButton: "Continue"});		if("Cancel" == q. buttonReturned) { return("cancel"); }		return(q.textReturned);	default:	break; 	}}function run(inputs, parameters) {	var input = inputs.join('\n').replace(/\d,\d\d\d/gi, function (x){return(x.substring(2,5))});	var app = Application.currentApplication();		app.includeStandardAdditions = true;	var home = app.doShellScript('echo $HOME');	var base = home + '/.temp_datamash_wizard_';	var cmdFN = uniqueFN(base + "_command.txt");	var inputFN = uniqueFN(base + "_input.tsv");		app.doShellScript('echo ' + quotedForm( input ) + " &gt; " + inputFN);	var options = cmdOpts(input.split('\n')[0]);	if ("cancel" == options) { return;}	var cmd =  "/usr/local/bin/datamash "	var output = app.doShellScript( 'cat ' + inputFN + ' | ' + cmd + ' ' + options )							var rows = output.split('\r');	var colMax = 0;	for (var i=0; i &lt; rows.length; i++){		rows[i] = rows[i].split('\t');		if (colMax &lt; rows[i].length) { colMax = rows[i].length; }	}	var Numbers = Application('Numbers'); 	if (Numbers.documents.length &gt; 0 ){		var Document = Numbers.documents[0];		if (Document.activeSheet() != undefined){			var Sheet = Document.activeSheet();					var Table = new  Numbers.Table({
					columnCount: (colMax &gt; 2 ? colMax : 2) , 
					rowCount: (rows.length &gt; 2 ? rows.length : 2)
		 			});
			Sheet.tables.push(Table);			for (var i=0; i &lt; rows.length; i++){				var tabrow = Table.rows[i];				for (var j=0; j &lt; rows[i].length; j++){					tabrow.cells[j].value = rows[i][j];				}			}					} else {			app.displayDialog('No Sheet');		}	} else {		app.displayDialog('No Docuemnts');	} 																var delFNs = [ cmdFN, inputFN ];	delFNs.forEach(function(fn,i){		app.doShellScript('rm -f ' + fn);	}); 	return input;}</string>
				</dict>
				<key>BundleIdentifier</key>
				<string>com.apple.Automator.RunJavaScript</string>
				<key>CFBundleVersion</key>
				<string>1.0</string>
				<key>CanShowSelectedItemsWhenRun</key>
				<false/>
				<key>CanShowWhenRun</key>
				<true/>
				<key>Category</key>
				<array>
					<string>AMCategoryUtilities</string>
				</array>
				<key>Class Name</key>
				<string>RunJavaScriptAction</string>
				<key>InputUUID</key>
				<string>2D421B40-A084-4B1C-9796-E98E31951B9D</string>
				<key>Keywords</key>
				<array>
					<string>Run</string>
					<string>JavaScript</string>
				</array>
				<key>OutputUUID</key>
				<string>68C3A43D-971D-49AB-9281-2800C7CEF627</string>
				<key>UUID</key>
				<string>D12BD581-99DD-4AB2-95E9-A7E15C156172</string>
				<key>UnlocalizedApplications</key>
				<array>
					<string>Automator</string>
				</array>
				<key>arguments</key>
				<dict>
					<key>0</key>
					<dict>
						<key>default value</key>
						<string>function run(input, parameters) {
	
	// Your script goes here

	return input;
}</string>
						<key>name</key>
						<string>source</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>0</string>
					</dict>
				</dict>
				<key>isViewVisible</key>
				<integer>1</integer>
				<key>location</key>
				<string>559.500000:802.000000</string>
				<key>nibPath</key>
				<string>/System/Library/Automator/Run JavaScript.action/Contents/Resources/Base.lproj/main.nib</string>
			</dict>
			<key>isViewVisible</key>
			<integer>1</integer>
		</dict>
	</array>
	<key>connectors</key>
	<dict/>
	<key>workflowMetaData</key>
	<dict>
		<key>applicationBundleID</key>
		<string>com.apple.iWork.Numbers</string>
		<key>applicationBundleIDsByPath</key>
		<dict>
			<key>/Applications/Numbers.app</key>
			<string>com.apple.iWork.Numbers</string>
		</dict>
		<key>applicationPath</key>
		<string>/Applications/Numbers.app</string>
		<key>applicationPaths</key>
		<array>
			<string>/Applications/Numbers.app</string>
		</array>
		<key>backgroundColorName</key>
		<string>blackColor</string>
		<key>inputTypeIdentifier</key>
		<string>com.apple.Automator.text</string>
		<key>outputTypeIdentifier</key>
		<string>com.apple.Automator.nothing</string>
		<key>presentationMode</key>
		<integer>11</integer>
		<key>processesInput</key>
		<integer>0</integer>
		<key>serviceApplicationBundleID</key>
		<string>com.apple.iWork.Numbers</string>
		<key>serviceApplicationPath</key>
		<string>/Applications/Numbers.app</string>
		<key>serviceInputTypeIdentifier</key>
		<string>com.apple.Automator.text</string>
		<key>serviceOutputTypeIdentifier</key>
		<string>com.apple.Automator.nothing</string>
		<key>serviceProcessesInput</key>
		<integer>0</integer>
		<key>systemImageName</key>
		<string>NSTouchBarCompose</string>
		<key>useAutomaticInputType</key>
		<integer>0</integer>
		<key>workflowTypeIdentifier</key>
		<string>com.apple.Automator.servicesMenu</string>
	</dict>
</dict>
</plist>
